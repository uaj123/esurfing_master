<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--配置spring的ioc，把service对配置进来-->
    <bean id="accountService" class="cn.uaj.service.impl.AccountServiceImpl"></bean>
    <!--
        spring中基于xml的AOP配置步骤
        1，把通知bean交给spring来管理
        2，使用aop:config标签表明开始AOP的配置
        3，使用aop:aspect标签表明配置切面
                id属性：是给切面提供一个唯一标识
                ref属性:指定通知类bean的id
        4，在aop:aspect标签内部使用对应标签来配置通知的类型
            aop:before : 表示配置前置通知
                method属性：指定通知类中哪个方法是前置通知
                pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强
        5，切入点表达式的写法：
            全通配写法：
                * *..*.*(..)
            实际开发中切入点表达式通常写法：切到业务层实现类下的所方法
                * cn.uaj.service.impl.*.*(..)
            关键字:execution(表达式)
            表达式：
                访问修饰符 返回值 包名.包名.包名...类名.方法名(参数列表)——访问修饰符可以省略
                参数列表：
                    可以直接写数据类型：
                        基本数据类型直接写名称：  int
                        引用类型写包名.类名的方式  ： java.lang.String
            本例表达式写法：
                public void cn.uaj.service.impl.AccountServiceImpl.findAll()
    -->
    <!--配置通知类-->
    <bean id="logger" class="cn.uaj.utils.Logger"></bean>
    <!--配置AOP-->
    <aop:config>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知的类型，并且建立通知方法和切入点方法的关联-->
<!--        &lt;!&ndash;前置通知&ndash;&gt;
            &lt;!&ndash;<aop:before method="printLogger" pointcut="execution(public void cn.uaj.service.impl.AccountServiceImpl.findAll())"></aop:before>&ndash;&gt;
            <aop:before method="beforePrintLog" pointcut="execution(* cn.uaj.service.impl.*.*(..))"></aop:before>
            &lt;!&ndash;后置通知&ndash;&gt;
            <aop:after-returning method="afterReturnPrintLog" pointcut="execution(* cn.uaj.service.impl.*.*(..))"></aop:after-returning>
            &lt;!&ndash;异常通知&ndash;&gt;
            <aop:after-throwing method="afterThrowingPrintLog" pointcut="execution(* cn.uaj.service.impl.*.*(..))"></aop:after-throwing>
            &lt;!&ndash;最终通知&ndash;&gt;
            <aop:after method="afterPrintLog" pointcut="execution(* cn.uaj.service.impl.*.*(..))"></aop:after>
            &lt;!&ndash;环绕通知&ndash;&gt;
            <aop:around method="aroundPrintLog" pointcut="execution(* cn.uaj.service.impl.*.*(..))"></aop:around>
-->
            <!--配置切入点表达式，id属性指定表达式的唯一标识，expression属性指定表达式内容
                此标签写在aop:aspect标签内部就只能当前切面使用
                ，还可以写在外面，此时所有切面都可以使用，但必须遵守约束，当前约束下，只能写在
                aop:aspect标签前面
            -->
            <aop:pointcut id="pt1" expression="execution(* cn.uaj.service.impl.*.*(..))"/>

<!--
            &lt;!&ndash;前置通知&ndash;&gt;
            &lt;!&ndash;<aop:before method="printLogger" pointcut="execution(public void cn.uaj.service.impl.AccountServiceImpl.findAll())"></aop:before>&ndash;&gt;
            <aop:before method="beforePrintLog" pointcut-ref="pt1"></aop:before>
            &lt;!&ndash;后置通知,它和异常通知永远只有一个执行&ndash;&gt;
            <aop:after-returning method="afterReturnPrintLog" pointcut-ref="pt1" ></aop:after-returning>
            &lt;!&ndash;异常通知&ndash;&gt;
            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"></aop:after-throwing>
            &lt;!&ndash;最终通知&ndash;&gt;
            <aop:after method="afterPrintLog" pointcut-ref="pt1"></aop:after>
-->
            <!--环绕通知-->
            <aop:around method="aroundPrintLog" pointcut-ref="pt1"></aop:around>
       </aop:aspect>
    </aop:config>
</beans>

